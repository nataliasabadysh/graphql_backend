"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilepaths = getFilepaths;
exports.getSources = getSources;

var _fs = require("fs");

var _constants = require("./constants");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getFilepaths(src, relFile, resolve) {
  return src.split(_constants.newlinePattern).reduce(function (acc, line) {
    var matches = _constants.importPattern.exec(line);

    if (matches) {
      var _matches = _slicedToArray(matches, 2),
          importPath = _matches[1];

      acc.push(resolve(importPath, relFile));
    }

    return acc;
  }, []);
}

function getSources(filepath, resolve) {
  var acc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var importSrc = (0, _fs.readFileSync)(filepath.replace(/'/g, '')).toString();
  var nestedPaths = getFilepaths(importSrc, filepath, resolve);
  var srcs = nestedPaths.length > 0 ? _toConsumableArray(nestedPaths.reduce(function (srcArr, fp) {
    return _toConsumableArray(srcArr).concat(_toConsumableArray(getSources(fp, resolve, [])));
  }, [])).concat([importSrc]) : [importSrc];
  return _toConsumableArray(srcs).concat(_toConsumableArray(acc));
}